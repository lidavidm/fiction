/* Copyright (C) 2013 David Li <li.davidm96@gmail.com>

   This file is part of Fiction Music.

   Fiction Music is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the Free
   Software Foundation, either version 3 of the License, or (at your option)
   any later version.

   Fiction Music is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
   more details.

   You should have received a copy of the GNU General Public License along with
   Fiction Music.  If not, see <http://www.gnu.org/licenses/>. */


package com.lithiumli.fiction;

import android.app.Activity;
import android.app.ActivityOptions;
import android.app.ActionBar;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.PorterDuff;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.view.Gravity;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.util.Log;

import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.Request.Method;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.Volley;

import com.lithiumli.fiction.util.BitmapLruCache;

public class NowPlayingActivity
    extends FictionActivity
{
    static final String ECHO_NEST_URL = "http://developer.echonest.com/api/v4/artist/images?api_key=ETDSSZR6RAMYOU4SI&results=1&name=";
    TextView mSongName;
    TextView mSongAlbum;
    TextView mSongArtist;
    ViewPager mCoverPager;
    CoverAdapter mAdapter;
    RequestQueue mRequestQueue;
    ImageLoader mImageLoader;

    @Override
    public void onCreate(Bundle savedInstanceState)
        {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.now_playing);
            initializeDrawer(false);

            mCoverPager = (ViewPager) findViewById(R.id.cover_pager);

            mSongName = (TextView) findViewById(R.id.np_song_name);
            mSongAlbum = (TextView) findViewById(R.id.np_song_album);
            mSongArtist = (TextView) findViewById(R.id.np_song_artist);
            mSongArtist.setSelected(true);

            ActionBar ab = getActionBar();
            ab.setDisplayHomeAsUpEnabled(true);
            ab.setTitle("Now Playing");
            ab.setSubtitle("Fiction Music");

            mRequestQueue = Volley.newRequestQueue(this);
            mImageLoader = new ImageLoader(mRequestQueue, new BitmapLruCache());
        }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case android.R.id.home:
            Intent parentIntent = new Intent(this, LibraryActivity.class);
            parentIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            ActivityOptions options =
                ActivityOptions.makeCustomAnimation(this,
                                                    R.anim.activity_slide_down,
                                                    R.anim.activity_slide_up);
            startActivity(parentIntent, options.toBundle());
            finish();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        overridePendingTransition(R.anim.activity_slide_down, R.anim.activity_slide_up);
    }

    @Override
    public void onServiceConnected(PlaybackService service) {
        mAdapter = new CoverAdapter(this, mCoverPager);
        mCoverPager.setAdapter(mAdapter);
        mCoverPager.setCurrentItem(CoverAdapter.COVER_MIDDLE, false);

        // set this afterwards so it doesn't try to handle the event
        // generated by setting the current item above
        mCoverPager.setOnPageChangeListener(mAdapter);
        mCoverPager.setPageTransformer(false, new DepthPageTransformer());
    }

    @Override
    public void onSongChange(Song song) {
        mSongName.setText(song.getTitle());
        mSongAlbum.setText(song.getAlbum());
        mSongArtist.setText(song.getArtist());

        if (song.getArtist().equals("<unknown>")) {
            ((ImageView) findViewById(R.id.background_image)).setImageDrawable(new ColorDrawable(0xFF000000));
            return;
        };
        String artist;
        try {
            artist = java.net.URLEncoder.encode(song.getArtist(), "UTF-8");
        }
        catch (java.io.UnsupportedEncodingException e) {
            return;
        }

        JsonObjectRequest req = new JsonObjectRequest(
            Method.GET,
            ECHO_NEST_URL + artist,
            null,
            new VolleyListener(),
            new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.d("fiction", "error");
                }
            });
        mRequestQueue.add(req);
    }

    @Override
    public void onPlayStateChange(PlaybackService.PlayState state) {
        ImageButton button = (ImageButton) findViewById(R.id.np_play_pause);

        switch (state) {
        case PLAYING:
            button.setImageResource(R.drawable.ic_menu_pause);
            break;
        case PAUSED:
            button.setImageResource(R.drawable.ic_menu_play);
            break;
        default:
            break;
        }
    }

    public void shuffleButton(View view) {
        ImageButton button = (ImageButton) view;

        if (isServiceBound()) {
            PlaybackService service = getService();
            PlaybackQueue queue = service.getQueue();

            if (queue.isShuffling()) {
                button.setColorFilter(0xFFFFFFFF);
                queue.restoreShuffle();
            }
            else {
                button.setColorFilter(0xFF0099CC);
                queue.shuffle();
            }
        }
    }

    // with thanks to
    // thehayro.blogspot.com/2012/12/enable-infinite-paging-with-android.html
    public class CoverAdapter
        extends PagerAdapter
        implements ViewPager.OnPageChangeListener {
        private static final int COVER_LEFT = 0;
        private static final int COVER_MIDDLE = 1;
        private static final int COVER_RIGHT = 2;

        FictionActivity mActivity;
        ViewPager mPager;
        int mSelectedCoverIndex;
        int mPrevCoverIndex;
        boolean mEvent = true;
        ImageView[] mCovers = new ImageView[3];

        public CoverAdapter(FictionActivity activity, ViewPager pager) {
            mActivity = activity;
            mPager = pager;
        }

        @Override
        public int getItemPosition(Object object) {
            return POSITION_NONE;
        }

        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {
            container.removeView((ImageView) object);
        }

        @Override
        public int getCount() {
            return 3;
        }

        @Override
        public ImageView instantiateItem(ViewGroup container, int position) {
            ImageView view = new ImageView(mActivity);
            view = initializeView(view, position);
            container.addView(view);
            mCovers[position] = view;
            return view;
        }

        private ImageView initializeView(ImageView view, int position) {
            int offset = -1;

            if (isAtBeginning()) {
                offset = 0;
                if (mEvent) {
                    setCurrentItemNoEvent(CoverAdapter.COVER_LEFT);
                }
            }
            else if (isAtEnd()) {
                offset = -2;
                if (mEvent) {
                    setCurrentItemNoEvent(CoverAdapter.COVER_RIGHT);
                }
            }

            Song song = getSong(position + offset);
            view.setImageURI(song.getAlbumArt());
            if (view.getDrawable() == null) {
                view.setImageURI(Song.DEFAULT_ALBUM);
            }

            return view;
        }

        @Override
        public boolean isViewFromObject(View view, Object obj) {
            return view == obj;
        }

        private Song getSong(int offset) {
            if (mActivity.isServiceBound()) {
                PlaybackQueue queue = mActivity.getService().getQueue();
                int position = queue.getCurrentPosition();

                if (position + offset < 0) {
                    return null;
                }
                if (position + offset > (queue.getCount() - 1)) {
                    return null;
                }

                return queue.getItem(position + offset);
            }
            return null;
        }

        private void setCover(int cover, Song song) {
            mCovers[cover].setImageURI(song.getAlbumArt());
            if (mCovers[cover].getDrawable() == null) {
                mCovers[cover].setImageURI(Song.DEFAULT_ALBUM);
            }
        }

        public boolean isNearBeginning() {
            if (mActivity.isServiceBound()) {
                return
                    mActivity.getService().getQueue().getCurrentPosition() == 1;
            }
            return false;
        }

        public boolean isNearEnd() {
            if (mActivity.isServiceBound()) {
                PlaybackQueue queue = mActivity.getService().getQueue();
                return queue.getCurrentPosition() == (queue.getCount() - 2);
            }
            return false;
        }

        public boolean isAtBeginning() {
            if (mActivity.isServiceBound()) {
                return
                    mActivity.getService().getQueue().getCurrentPosition() == 0;
            }
            return false;
        }

        public boolean isAtEnd() {
            if (mActivity.isServiceBound()) {
                PlaybackQueue queue = mActivity.getService().getQueue();
                return queue.getCurrentPosition() == (queue.getCount() - 1);
            }
            return false;
        }

        public void setCurrentItemNoEvent(int position) {
            mEvent = false;
            mPager.setCurrentItem(position, false);
            mEvent = true;
        }

        @Override
        public void onPageSelected(int position) {
            mPrevCoverIndex = mSelectedCoverIndex;
            mSelectedCoverIndex = position;
        }

        @Override
        public void onPageScrollStateChanged(int state) {
            if (!mEvent) return;

            // TODO: better way to determine direction of swipe
            // TODO: code deduplication
            if (state == ViewPager.SCROLL_STATE_IDLE) {
                Song prevSong = getSong(-1);
                Song currentSong = getSong(0);
                Song nextSong = getSong(1);

                if (mSelectedCoverIndex == COVER_MIDDLE) {
                    if (isAtBeginning()) {
                        setCover(COVER_LEFT, currentSong);
                        setCover(COVER_MIDDLE, nextSong);
                        setCover(COVER_RIGHT, getSong(2));

                        if (mActivity.isServiceBound()) {
                            mActivity.getService().next();
                        }
                    }
                    else if (isAtEnd()) {
                        setCover(COVER_RIGHT, getSong(-2));
                        setCover(COVER_MIDDLE, prevSong);
                        setCover(COVER_LEFT, currentSong);

                        if (mActivity.isServiceBound()) {
                            mActivity.getService().prev();
                        }
                    }
                    else {
                        return;
                    }
                }

                // swipe to right (left page)
                if (mSelectedCoverIndex == COVER_LEFT) {
                    if (isNearBeginning()) {
                        setCover(COVER_LEFT, prevSong);
                        setCover(COVER_MIDDLE, currentSong);
                    }
                    else if (isAtBeginning()) {
                        return;
                    }
                    else {
                        setCover(COVER_RIGHT, getSong(-2));
                        setCover(COVER_MIDDLE, prevSong);
                        setCover(COVER_LEFT, currentSong);
                        mPager.setCurrentItem(COVER_MIDDLE, false);
                    }

                    if (mActivity.isServiceBound()) {
                        mActivity.getService().prev();
                    }
                }
                // swipe to left (right page)
                else if (mSelectedCoverIndex == COVER_RIGHT) {
                    if (isNearEnd()) {
                        setCover(COVER_MIDDLE, currentSong);
                        setCover(COVER_RIGHT, nextSong);
                    }
                    else if (isAtEnd()) {
                        return;
                    }
                    else {
                        setCover(COVER_LEFT, currentSong);
                        setCover(COVER_MIDDLE, nextSong);
                        setCover(COVER_RIGHT, getSong(2));
                        mPager.setCurrentItem(COVER_MIDDLE, false);
                    }

                    if (mActivity.isServiceBound()) {
                        mActivity.getService().next();
                    }
                }
            }
        }

        @Override
        public void onPageScrolled(int position,
                                   float positionOffset,
                                   int positionOffsetPixels) {
        }
    }

    public class DepthPageTransformer implements ViewPager.PageTransformer {
        private static final float MIN_SCALE = 0.75f;

        public void transformPage(View view, float position) {
            int pageWidth = view.getWidth();

            if (position < -1) { // [-Infinity,-1)
                // This page is way off-screen to the left.
                view.setAlpha(0);

            } else if (position <= 0) { // [-1,0]
                // Use the default slide transition when moving to the left page
                view.setAlpha(1);
                view.setTranslationX(0);
                view.setScaleX(1);
                view.setScaleY(1);

            } else if (position <= 1) { // (0,1]
                // Fade the page out.
                view.setAlpha(1 - position);

                // Counteract the default slide transition
                view.setTranslationX(pageWidth * -position);

                // Scale the page down (between MIN_SCALE and 1)
                float scaleFactor = MIN_SCALE
                    + (1 - MIN_SCALE) * (1 - Math.abs(position));
                view.setScaleX(scaleFactor);
                view.setScaleY(scaleFactor);

            } else { // (1,+Infinity]
                // This page is way off-screen to the right.
                view.setAlpha(0);
            }
        }
    }

    class VolleyListener implements Response.Listener<JSONObject> {
        @Override
            public void onResponse(JSONObject response) {
            try {
                response = response.getJSONObject("response");
                JSONArray images = response.getJSONArray("images");

                if (images.length() > 0) {
                    JSONObject image = images.getJSONObject(0);
                    String url = image.getString("url");
                    mImageLoader.get(url, new VolleyImageListener());
                }
            }
            catch (JSONException e) {
                Log.d("fiction", "response error");
            }
        }
    }

    class VolleyImageListener implements ImageLoader.ImageListener {
        @Override
        public void onErrorResponse(VolleyError e) {
            // image load error
        }

        @Override
        public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {
            if (response.getBitmap() != null) {
                ((ImageView) NowPlayingActivity.this.findViewById(R.id.background_image)).setImageBitmap(response.getBitmap());
            }
            else {
                ((ImageView)
        NowPlayingActivity.this.findViewById(R.id.background_image)).setImageDrawable(new
                                                                                      ColorDrawable(0xFF000000));
            }
        }
    }
}
